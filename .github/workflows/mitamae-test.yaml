name: mitamae Test

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  build-test-container:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ghcr.io/azrsh/dotfiles/test:archlinux-${{ github.sha }}
          file: test/archlinux.Dockerfile
  
  find:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      matrix-include: ${{ steps.matrix-include.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - id: cookbooks
        run: |
          cookbooks="$(ls -A mitamae/cookbooks)"
          echo "${cookbooks}"
          echo 'value<<EOF' >> $GITHUB_OUTPUT
          echo "${cookbooks}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        shell: bash
      - id: find-platforms
        env:
          COOKBOOKS: ${{ steps.cookbooks.outputs.value }}
        shell: bash
        run: |
          echo 'value<<EOF' >> $GITHUB_OUTPUT
          if [[ -n "${COOKBOOKS}" ]]; then
            while read -r LINE; do
              pushd "mitamae/cookbooks/${LINE}"
              json="$(cat metadata.json | \
                jq --arg cookbook "${LINE}" '{cookbook: $cookbook, platform: .platform[]}')"
              echo "${json}"
              echo "${json}" >> $GITHUB_OUTPUT
              popd
            done < <(printenv COOKBOOKS)
          else
            json='[]'
            echo "${json}"
            echo "${json}" >> $GITHUB_OUTPUT
          fi
          echo 'EOF' >> $GITHUB_OUTPUT
      - id: matrix-include
        env:
          JSONS: ${{ steps.find-platforms.outputs.value }}
        shell: bash
        run: |
          json="$(echo "${JSONS}" | jq -s '. | flatten')"
          echo 'value<<EOF' >> $GITHUB_OUTPUT
          echo "${json}"
          echo "${json}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  test:
    runs-on: ${{ matrix.platform == 'darwin' && 'macos-latest' || 'ubuntu-latest' }}
    container: ${{ matrix.platform == 'arch' && format('ghcr.io/azrsh/dotfiles/test:archlinux-{0}', github.sha) || null }}
    permissions:
      contents: read
    needs: [find, build-test-container]
    # Handle empty needs to resolve ` Matrix vector 'test' does not contain any values` error
    if: ${{ needs.find.outputs.matrix-include != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.find.outputs.matrix-include) }}
    steps:
      - uses: actions/checkout@v4
      - working-directory: mitamae
        if: ${{ matrix.platform != 'arch' }}
        shell: bash
        run: |
          bin/setup
          bin/mitamae local -l debug cookbooks/${{ matrix.cookbook }}/default.rb
      - working-directory: mitamae
        if: ${{ matrix.platform == 'arch' }}
        shell: bash
        run: |
          chown -vR dotfiles .
      - working-directory: mitamae
        if: ${{ matrix.platform == 'arch' }}
        shell: sudo -u dotfiles bash --noprofile --norc -eo pipefail {0}
        run: |
          bin/setup
          bin/mitamae local -l debug cookbooks/${{ matrix.cookbook }}/default.rb

  e2e-test:
    runs-on: ${{ matrix.platform == 'darwin' && 'macos-latest' || 'ubuntu-latest' }}
    container: ${{ matrix.platform == 'arch' && format('ghcr.io/azrsh/dotfiles/test:archlinux-{0}', github.sha) || null }}
    permissions:
      contents: read
      packages: read
    needs: [build-test-container]
    strategy:
      fail-fast: false
      matrix:
        platform: ["darwin", "ubuntu", "arch"]
    steps:
      - uses: actions/checkout@v4
      - if: ${{ matrix.platform != 'arch' }}
        shell: bash
        run: |
          bash setup.sh -l debug
      - if: ${{ matrix.platform == 'arch' }}
        shell: bash
        run: |
          chown -vR dotfiles .
      - if: ${{ matrix.platform == 'arch' }}
        shell: sudo -u dotfiles bash --noprofile --norc -eo pipefail {0}
        run: |
          bash setup.sh -l debug

  # A job that summarizes the results of jobs for required status checks.
  all-test:
    permissions: {}
    runs-on: ubuntu-latest
    needs: [find, test, e2e-test]
    if: ${{ success() || (needs.find.result == 'success' && needs.find.outputs.matrix-include == '[]') }}
    steps:
      - name: Null Step
        run: |
          echo '${{ toJson(needs) }}'
